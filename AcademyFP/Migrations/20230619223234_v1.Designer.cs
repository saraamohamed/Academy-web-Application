// <auto-generated />
using System;
using AcademyFP.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AcademyFP.Migrations
{
    [DbContext(typeof(AcademyDbContext))]
    [Migration("20230619223234_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AcademyFP.Models.Branch", b =>
                {
                    b.Property<int>("Branch_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Branch_ID"));

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DeletionStatus")
                        .HasColumnType("bit");

                    b.Property<int>("SupervisorLandlineNumber")
                        .HasColumnType("int");

                    b.Property<string>("SupervisorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SupervisorPhoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("Username")
                        .HasColumnType("int");

                    b.HasKey("Branch_ID");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("AcademyFP.Models.Course", b =>
                {
                    b.Property<int>("Course_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Course_ID"));

                    b.Property<int>("CourseCost")
                        .HasColumnType("int");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CourseDurationInHours")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DeletionStatus")
                        .HasColumnType("bit");

                    b.HasKey("Course_ID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("AcademyFP.Models.Group", b =>
                {
                    b.Property<int>("Group_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Group_ID"));

                    b.Property<bool>("DeletionStatus")
                        .HasColumnType("bit");

                    b.HasKey("Group_ID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("AcademyFP.Models.Language", b =>
                {
                    b.Property<int>("Language_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Language_ID"));

                    b.Property<bool>("DeletionStatus")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Language_ID");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("AcademyFP.Models.Subject", b =>
                {
                    b.Property<int>("Subject_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Subject_ID"));

                    b.Property<string>("ContainingCourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Course_ID")
                        .HasColumnType("int");

                    b.Property<bool>("DeletionStatus")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Subject_ID");

                    b.HasIndex("Course_ID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("AcademyFP.Models.Trainee", b =>
                {
                    b.Property<int>("TraineeNational_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TraineeNational_ID"));

                    b.Property<string>("AcademicQualification")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AcademicQualifictionCopy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("AcademicYear")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ActivityStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ArabicFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Branch_ID")
                        .HasColumnType("int");

                    b.Property<bool>("DeletionStatus")
                        .HasColumnType("bit");

                    b.Property<string>("EnglishFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FirstPhoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("LandlineNumber")
                        .HasColumnType("int");

                    b.Property<int>("MilitaryStatus")
                        .HasColumnType("int");

                    b.Property<int>("NationalIdCardCopy")
                        .HasColumnType("int");

                    b.Property<string>("PersonalPhoto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("QualificationObtainingYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("Recommender")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SecondPhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("TraineeNational_ID");

                    b.HasIndex("Branch_ID");

                    b.ToTable("Trainees");
                });

            modelBuilder.Entity("AcademyFP.Models.TraineeFinancialTranscations", b =>
                {
                    b.Property<int>("Transaction_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Transaction_id"));

                    b.Property<int>("Course_ID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("ReceivedMoneyAmount")
                        .HasColumnType("bit");

                    b.Property<int>("TraineeNational_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Transaction_id");

                    b.HasIndex("Course_ID");

                    b.HasIndex("TraineeNational_id");

                    b.ToTable("TraineeFinancialTranscations");
                });

            modelBuilder.Entity("AcademyFP.Models.TraineeHasCourse", b =>
                {
                    b.Property<int>("TraineeNational_ID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("Course_ID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("TraineeNational_ID", "Course_ID");

                    b.HasIndex("Course_ID");

                    b.ToTable("TraineeHasCourses");
                });

            modelBuilder.Entity("AcademyFP.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ActivityStatus")
                        .HasColumnType("bit");

                    b.Property<int>("Branch_ID")
                        .HasColumnType("int");

                    b.Property<bool>("DeletionStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Group_ID")
                        .HasColumnType("int");

                    b.Property<bool>("IsSupervisor")
                        .HasColumnType("bit");

                    b.Property<int>("Language_ID")
                        .HasColumnType("int");

                    b.Property<int>("Password")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("Username");

                    b.HasIndex("Branch_ID");

                    b.HasIndex("Group_ID");

                    b.HasIndex("Language_ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AcademyFP.Models.Subject", b =>
                {
                    b.HasOne("AcademyFP.Models.Course", "Course")
                        .WithMany("Subjects")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("AcademyFP.Models.Trainee", b =>
                {
                    b.HasOne("AcademyFP.Models.Branch", "Branch")
                        .WithMany("Trainees")
                        .HasForeignKey("Branch_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("AcademyFP.Models.TraineeFinancialTranscations", b =>
                {
                    b.HasOne("AcademyFP.Models.Course", "Course")
                        .WithMany("TraineeFinancialTranscations")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyFP.Models.Trainee", "Trainee")
                        .WithMany("TraineeFinancialTranscations")
                        .HasForeignKey("TraineeNational_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("AcademyFP.Models.TraineeHasCourse", b =>
                {
                    b.HasOne("AcademyFP.Models.Course", "Course")
                        .WithMany("TraineeHasCourses")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyFP.Models.Trainee", "Trainee")
                        .WithMany("TraineeHasCourses")
                        .HasForeignKey("TraineeNational_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("AcademyFP.Models.User", b =>
                {
                    b.HasOne("AcademyFP.Models.Branch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("Branch_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyFP.Models.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("Group_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcademyFP.Models.Language", "Language")
                        .WithMany("Users")
                        .HasForeignKey("Language_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Group");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("AcademyFP.Models.Branch", b =>
                {
                    b.Navigation("Trainees");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AcademyFP.Models.Course", b =>
                {
                    b.Navigation("Subjects");

                    b.Navigation("TraineeFinancialTranscations");

                    b.Navigation("TraineeHasCourses");
                });

            modelBuilder.Entity("AcademyFP.Models.Group", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AcademyFP.Models.Language", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AcademyFP.Models.Trainee", b =>
                {
                    b.Navigation("TraineeFinancialTranscations");

                    b.Navigation("TraineeHasCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
